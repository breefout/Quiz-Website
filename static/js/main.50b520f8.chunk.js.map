{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["App","answerArr","length","howgay","questions","fill","undefined","state","answers","finalResult","updateScore","bind","calculateResult","qIndex","aIndex","newArr","this","slice","setState","unanswered","indexOf","alert","totalScore","totalP","totalA","forEach","result","extras","asexual","minimumScore","responses","endResponse","find","response","maximumScore","console","log","pansexual","id","Card","Title","title","Body","style","marginBottom","description","Button","width","onClick","variant","margin","quizTitle","map","question","key","Header","class","Form","Group","answer","Check","marginTop","name","type","label","text","marginLeft","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.50b520f8.chunk.js","sourcesContent":["import React from 'react';\nimport myCss from './App.css'\nimport howgay from './howgay.json';\nimport Button from 'react-bootstrap/Button'\nimport Card from 'react-bootstrap/Card'\nimport Form from 'react-bootstrap/Form'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    var answerArr = [];\n    answerArr.length = howgay.questions.length;\n    answerArr.fill(undefined);\n\n    this.state = {\n      answers: answerArr,\n      finalResult: null\n    };\n\n    this.updateScore = this.updateScore.bind(this);\n    this.calculateResult = this.calculateResult.bind(this);\n  }\n\n  updateScore(qIndex, aIndex) {\n    var newArr = this.state.answers.slice();\n    newArr[qIndex] = aIndex;\n    this.setState({answers: newArr});\n  }\n\n  calculateResult() {\n    let unanswered = this.state.answers.indexOf(undefined);\n    if (unanswered > -1) {\n      alert(\"Question #\" + (unanswered + 1) + \" needs to be answered.\");\n      return;\n    }\n\n    var totalScore = 0;\n    var totalP = 0;\n    var totalA = 0;\n\n    this.state.answers.forEach((aIndex, qIndex) => {\n      let result = howgay.questions[qIndex].answers[aIndex].result;\n      totalScore += result[0];\n      if (result[1]) {\n        if (result[1] === \"p\") {\n          totalP++;\n        } else if (result[1] === \"a\") {\n          totalA++;\n        }\n      }\n    });\n\n    if (totalScore <= 0 && totalA > howgay.extras.asexual.minimumScore) {\n      this.setState({finalResult: [howgay.responses[0]]});\n      return;\n    }\n\n    var endResponse = howgay.responses.find((response) => response.minimumScore <= totalScore && totalScore <= response.maximumScore);\n    console.log(endResponse);\n    if (endResponse == undefined) {\n      if (totalScore < 0) {\n        endResponse = howgay.responses[1];\n      } else if (totalScore > howgay.responses[howgay.responses.length-1].maximumScore) {\n        endResponse = howgay.responses[howgay.responses.length-1];\n      }\n    }\n    console.log(endResponse);\n\n    this.setState({finalResult: [endResponse, totalP > howgay.extras.pansexual.minimumScore]});\n  }\n\n  render() {\n    if (this.state.finalResult) {\n      let result = this.state.finalResult;\n      return <div id=\"background\">\n        <Card id=\"endCard\">\n          <Card.Title>{\"You are \" + result[0].title}</Card.Title>\n          <Card.Body>\n            <div style={{marginBottom:\"20px\"}}>{result[0].description}</div>\n          {\n            result[1] ? <div style={{marginBottom:\"20px\"}}>{howgay.extras.pansexual.title}</div> : null\n          }\n          <Button style={{width:\"80px\"}} onClick={() => this.setState({finalResult: null})} variant=\"primary\">Okay</Button>\n          </Card.Body>\n        </Card>\n      </div>\n    } else {\n      return <div id=\"background\">\n      <Card style={{margin:\"20px\"}}>\n        <h1 id=\"quizTitle\">{howgay.quizTitle}</h1>\n      </Card>\n      {howgay.questions.map((question, qIndex) =>\n        <Card key={qIndex} style={{margin:\"20px\"}}>\n          <Card.Header class=\"question\">{\"#\" + (qIndex+1) + \". \" + question.question}</Card.Header>\n          <Form style={{margin:\"10px\"}}>\n          <Form.Group>\n            {question.answers.map((answer, aIndex) => <Form.Check style={{marginTop:\"10px\"}} name={qIndex} key={aIndex} onClick={() => this.updateScore(qIndex, aIndex)} type=\"radio\" label={answer.text} id={\"\" + qIndex + aIndex}></Form.Check>)}\n          </Form.Group>\n          </Form>\n        </Card>)}\n        <Button onClick={this.calculateResult} variant=\"primary\" style={{marginLeft:\"20px\"}}>Submit</Button>\n    </div>\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}