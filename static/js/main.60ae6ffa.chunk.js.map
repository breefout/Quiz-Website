{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["App","answerArr","length","howgay","questions","fill","state","answers","updateScore","bind","calculateResult","qIndex","aIndex","newArr","this","slice","setState","totalScore","forEach","result","totalP","totalA","alert","id","Card","style","margin","quizTitle","map","question","key","Header","class","Form","Group","answer","Check","marginTop","name","onClick","type","label","text","Button","variant","marginLeft","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TAoEeA,E,kDA5Db,aAAe,IAAD,sBACZ,eAEA,IAAIC,EAAY,GAHJ,OAIZA,EAAUC,OAASC,EAAOC,UAAUF,OACpCD,EAAUI,KAAK,GAEf,EAAKC,MAAQ,CACXC,QAASN,GAGX,EAAKO,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBAZX,E,wDAeFE,EAAQC,GAClB,IAAIC,EAASC,KAAKR,MAAMC,QAAQQ,QAChCF,EAAOF,GAAUC,EACjBE,KAAKE,SAAS,CAACT,QAASM,M,wCAIxB,IAAII,EAAa,EAIjBH,KAAKR,MAAMC,QAAQW,SAAQ,SAACN,EAAQD,GAClC,IAAIQ,EAAShB,EAAOC,UAAUO,GAAQJ,QAAQK,GAAQO,OACtDF,GAAcE,EAAO,GACjBA,EAAO,KACS,MAAdA,EAAO,GACTC,EACuB,MAAdD,EAAO,IAChBE,MAKNC,MAAML,K,+BAGE,IAAD,OACP,OAAO,yBAAKM,GAAG,cACb,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,OAAO,SACnB,wBAAIH,GAAG,aAAapB,EAAOwB,YAE5BxB,EAAOC,UAAUwB,KAAI,SAACC,EAAUlB,GAAX,OACpB,kBAACa,EAAA,EAAD,CAAMM,IAAKnB,EAAQc,MAAO,CAACC,OAAO,SAChC,kBAACF,EAAA,EAAKO,OAAN,CAAaC,MAAM,YAAY,KAAOrB,EAAO,GAAK,KAAOkB,EAASA,UAClE,kBAACI,EAAA,EAAD,CAAMR,MAAO,CAACC,OAAO,SACrB,kBAACO,EAAA,EAAKC,MAAN,KACGL,EAAStB,QAAQqB,KAAI,SAACO,EAAQvB,GAAT,OAAoB,kBAACqB,EAAA,EAAKG,MAAN,CAAYX,MAAO,CAACY,UAAU,QAASC,KAAM3B,EAAQmB,IAAKlB,EAAQ2B,QAAS,kBAAM,EAAK/B,YAAYG,EAAQC,IAAS4B,KAAK,QAAQC,MAAON,EAAOO,KAAMnB,GAAI,GAAKZ,EAASC,aAIpN,kBAAC+B,EAAA,EAAD,CAAQJ,QAASzB,KAAKJ,gBAAiBkC,QAAQ,UAAUnB,MAAO,CAACoB,WAAW,SAA5E,e,GAxDUC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.60ae6ffa.chunk.js","sourcesContent":["import React from 'react';\nimport myCss from './App.css'\nimport howgay from './howgay.json';\nimport Button from 'react-bootstrap/Button'\nimport Card from 'react-bootstrap/Card'\nimport Form from 'react-bootstrap/Form'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    var answerArr = [];\n    answerArr.length = howgay.questions.length;\n    answerArr.fill(0);\n\n    this.state = {\n      answers: answerArr\n    };\n\n    this.updateScore = this.updateScore.bind(this);\n    this.calculateResult = this.calculateResult.bind(this);\n  }\n\n  updateScore(qIndex, aIndex) {\n    var newArr = this.state.answers.slice();\n    newArr[qIndex] = aIndex;\n    this.setState({answers: newArr});\n  }\n\n  calculateResult() {\n    var totalScore = 0;\n    var totalP = 0;\n    var totalA = 0;\n\n    this.state.answers.forEach((aIndex, qIndex) => {\n      let result = howgay.questions[qIndex].answers[aIndex].result;\n      totalScore += result[0];\n      if (result[1]) {\n        if (result[1] === \"p\") {\n          totalP++;\n        } else if (result[1] === \"a\") {\n          totalA++;\n        }\n      }\n    });\n\n    alert(totalScore);\n  }\n\n  render() {\n    return <div id=\"background\">\n      <Card style={{margin:\"20px\"}}>\n        <h1 id=\"quizTitle\">{howgay.quizTitle}</h1>\n      </Card>\n      {howgay.questions.map((question, qIndex) =>\n        <Card key={qIndex} style={{margin:\"20px\"}}>\n          <Card.Header class=\"question\">{\"#\" + (qIndex+1) + \". \" + question.question}</Card.Header>\n          <Form style={{margin:\"10px\"}}>\n          <Form.Group>\n            {question.answers.map((answer, aIndex) => <Form.Check style={{marginTop:\"10px\"}} name={qIndex} key={aIndex} onClick={() => this.updateScore(qIndex, aIndex)} type=\"radio\" label={answer.text} id={\"\" + qIndex + aIndex}></Form.Check>)}\n          </Form.Group>\n          </Form>\n        </Card>)}\n        <Button onClick={this.calculateResult} variant=\"primary\" style={{marginLeft:\"20px\"}}>Submit</Button>\n    </div>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}